<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="APPD_MVP_TEST_PLAN" enabled="true">
      <stringProp name="TestPlan.comments">event simulator</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">101</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">500</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bombard Events" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;eventList&quot;: [{&#xd;
		&quot;eventId&quot;: &quot;3c6435c8-7cd5-11ea-8d95-43f4ee316fe5&quot;,&#xd;
		&quot;type&quot;: &quot;EType1&quot;,&#xd;
		&quot;body&quot;: {&#xd;
			&quot;name&quot;: &quot;appd_mp_event&quot;,&#xd;
			&quot;eventStart&quot;: 1586622559298,&#xd;
			&quot;eventData&quot;: {&#xd;
				&quot;why&quot;: &quot;Node Failure&quot;,&#xd;
				&quot;how&quot;: &quot;Power Outage&quot;,&#xd;
				&quot;what&quot;: &quot;Notify Zookeeper&quot;&#xd;
			},&#xd;
			&quot;severity&quot;: 2,&#xd;
			&quot;tags&quot;: [{&#xd;
				&quot;name&quot;: &quot;mustResolve&quot;&#xd;
			}, {&#xd;
				&quot;name&quot;: &quot;openCase&quot;&#xd;
			}]&#xd;
		}&#xd;
	}, {&#xd;
		&quot;eventId&quot;: &quot;3c64f91f-7cd5-11ea-8d95-bf20f1433748&quot;,&#xd;
		&quot;type&quot;: &quot;EType2&quot;,&#xd;
		&quot;body&quot;: {&#xd;
			&quot;name&quot;: &quot;appd_mp_event&quot;,&#xd;
			&quot;eventStart&quot;: 1586622559550,&#xd;
			&quot;eventData&quot;: {&#xd;
				&quot;why&quot;: &quot;System Reboot&quot;,&#xd;
				&quot;how&quot;: &quot;Manual&quot;,&#xd;
				&quot;what&quot;: &quot;Notify Mainteance&quot;&#xd;
			},&#xd;
			&quot;severity&quot;: 5,&#xd;
			&quot;tags&quot;: [{&#xd;
				&quot;name&quot;: &quot;noRetries&quot;&#xd;
			}, {&#xd;
				&quot;name&quot;: &quot;closeCase&quot;&#xd;
			}]&#xd;
		}&#xd;
	}, {&#xd;
		&quot;eventId&quot;: &quot;3c6ce871-7cd5-11ea-8d95-0573294a6574&quot;,&#xd;
		&quot;type&quot;: &quot;EType3&quot;,&#xd;
		&quot;body&quot;: {&#xd;
			&quot;name&quot;: &quot;appd_mp_event&quot;,&#xd;
			&quot;eventStart&quot;: 1586622560550,&#xd;
			&quot;eventData&quot;: {&#xd;
				&quot;why&quot;: &quot;Connection Lost&quot;,&#xd;
				&quot;how&quot;: &quot;Timeout&quot;,&#xd;
				&quot;what&quot;: &quot;Wait&quot;&#xd;
			},&#xd;
			&quot;severity&quot;: 3,&#xd;
			&quot;tags&quot;: [{&#xd;
				&quot;name&quot;: &quot;retry&quot;&#xd;
			}, {&#xd;
				&quot;name&quot;: &quot;resolved&quot;&#xd;
			}]&#xd;
		}&#xd;
	}, {&#xd;
		&quot;eventId&quot;: &quot;3c6f5989-7cd5-11ea-8d95-4f1bd2633711&quot;,&#xd;
		&quot;type&quot;: &quot;EType4&quot;,&#xd;
		&quot;body&quot;: {&#xd;
			&quot;name&quot;: &quot;appd_mp_event&quot;,&#xd;
			&quot;eventStart&quot;: 1586622561550,&#xd;
			&quot;eventData&quot;: {&#xd;
				&quot;why&quot;: &quot;Overload&quot;,&#xd;
				&quot;how&quot;: &quot;DDos&quot;,&#xd;
				&quot;what&quot;: &quot;BlocK&quot;&#xd;
			},&#xd;
			&quot;severity&quot;: 1,&#xd;
			&quot;tags&quot;: [{&#xd;
				&quot;name&quot;: &quot;attack&quot;&#xd;
			}, {&#xd;
				&quot;name&quot;: &quot;openCase&quot;&#xd;
			}]&#xd;
		}&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">7180</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/event-gateway</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Decimate that web service</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">S8EOKCffRvEYTO1pIXIo7Q</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Tenant</stringProp>
                  <stringProp name="Header.value">us-west-sr</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">10</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
